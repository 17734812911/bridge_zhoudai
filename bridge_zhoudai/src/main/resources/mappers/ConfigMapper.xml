<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xtw.bridge.mapper.ConfigDao">

    <!--  查询所有产品名称  -->
    <select id="queryAllDeviceName" resultType="java.lang.String">
        select name from device_type
    </select>

    <!--  根据terminalId查询device表是否已经存在要添加的设备  -->
    <select id="queryIsExistDevice" resultType="java.lang.Integer">
        select count(id) from device where terminal_id = #{terminalId}
    </select>
    <!--  根据terminalId查询device_config表是否已经存在要添加的设备  -->
    <select id="queryIsExistDeviceConfig" resultType="java.lang.Integer">
        select count(id) from device_config where terminal_id = #{terminalId}
    </select>
    <!--  根据channel和partitionId判断表中是否已经存在要添加的配置  -->
    <select id="queryIsExist_GXCE" resultType="java.lang.Integer">
        select count(id) from fibre_temperature_config where channel=#{channel} and partition_id = #{partitionId}
    </select>

    <!--  查询外置局放所有配置  -->
    <select id="queryOutPartialConfig" resultType="java.util.LinkedHashMap">
        select oc.id,dt.name,dt.communication_mode,d.terminal_id,d.joint,l.line_name,oc.partition_id,oc.alarm_value,oc.alarm_frequency_value,oc.offset_value,dc.device_ip,dc.port,dc.interval_slave,dc.retry_count,dc.retry_interval,dc.polling_interval
        from device_type dt, device d, line l, outpartial_config oc, device_config dc
        where dt.device_type_id = d.device_type_id and d.line_id = l.line_id and d.terminal_id = oc.terminal_id and oc.terminal_id = dc.terminal_id
        group by d.terminal_id
    </select>

    <!--  查询光纤测温所有配置  -->
    <select id="queryFibreTemperatureConfig" resultType="java.util.LinkedHashMap">
        select * from fibre_temperature_config
    </select>

    <!--  查询环境量和表皮测温所有配置  -->
    <select id="queryEnvironmentDeviceConfigs" resultType="java.util.LinkedHashMap">
        select ca.id,d.name,d.terminal_id,d.joint,dt.communication_mode,dc.device_ip,dc.port,dc.partition_id,dc.interval_slave,dc.retry_count,dc.retry_interval,dc.polling_interval,ca.name caname, ca.channel_id,ca.channel_type,ca.range_up,ca.range_low,ca.alarm_up,ca.offset_value,ca.is_use,l.line_name
        from device d,device_type dt,device_config dc, channel_attribute ca,line l
        where d.device_type_id = dt.device_type_id and d.terminal_id = dc.terminal_id and d.terminal_id = ca.terminal_id and d.line_id = l.line_id and d.line_id = l.line_id
        group by ca.id
</select>

    <!--  根据产品名称查询设备的type_id  -->
    <select id="queryDeviceTypeId" resultType="java.lang.String">
        select device_type_id from device_type where name = #{name}
    </select>
    <!--  根据线路名称查询对应的line_id  -->
    <select id="queryLineId" resultType="java.lang.String">
        select line_id from line where line_name = #{name}
    </select>
    <!--  添加device表数据  -->
    <insert id="addDevice" parameterType="device">
        insert into device(name,device_type_id,terminal_id,line_id,joint) values(#{deviceName},#{deviceTypeId},#{terminalId},#{lineId},#{joint})
    </insert>
    <!--  添加outpartial_config表数据  -->
    <insert id="addOutpartialConfig" parameterType="outPartialConfig">
        insert into outpartial_config(partition_id, terminal_id, alarm_value, alarm_frequency_value, offset_value) values(#{partitionId},#{terminalId},#{alarmValue},#{alarmFrequencyValue},#{offsetValue})
    </insert>
    <!--  添加device_config表数据  -->
    <insert id="addDeviceConfig" parameterType="HashMap">
        insert into device_config(terminal_id,device_type_id,device_ip,port,partition_id,interval_slave,retry_count,retry_interval,polling_interval) values(#{terminalId},#{deviceTypeId},#{deviceIp},#{port},#{partitionId},#{intervalSlave},#{retryCount},#{retryInterval},#{pollingInterval})
    </insert>

    <!--  修改外置局放配置  -->
    <!--  修改device表  -->
    <update id="editDevice" parameterType="device">
        update device set name = #{deviceName}, device_type_id = #{deviceTypeId},line_id = #{lineId},joint=#{joint} where terminal_id = #{terminalId}
    </update>
    <!--  更新device_config表  -->
    <update id="editDeviceConfig" parameterType="HashMap">
        update device_config set device_type_id = #{deviceTypeId},device_ip = #{deviceIp},port = #{port},partition_id = #{partitionId},interval_slave = #{intervalSlave},retry_count = #{retryCount},retry_interval = #{retryInterval},polling_interval = #{pollingInterval} where terminal_id = #{terminalId}
    </update>
    <!--  更新outpartial_config表  -->
    <update id="editOutpartialConfig" parameterType="outPartialConfig">
        update outpartial_config set partition_id = #{partitionId},terminal_id = #{terminalId},alarm_value = #{alarmValue},alarm_frequency_value = #{alarmFrequencyValue},offset_value = #{offsetValue} where terminal_id = #{terminalId}
    </update>

    <!--  删除外置局放配置  -->
    <!--  删除device表对应数据  -->
    <delete id="delDevice">
        delete from device where terminal_id = #{terminalId}
    </delete>
    <!--  删除device_config表对应数据  -->
    <delete id="delDeviceConfig">
        delete from device_config where terminal_id = #{terminalId}
    </delete>
    <!--  删除outpartial_config表对应数据  -->
    <delete id="delOutpartialConfig">
        delete from outpartial_config where terminal_id = #{terminalId}
    </delete>

    <!--  添加光纤测温配置  -->
    <insert id="addFibreTemperatureConfig" parameterType="FibreTemperatureConfig">
        insert into fibre_temperature_config(channel, partition_id, start_position, end_position, device_ip, offset_value, alarm_value, read_order) values(#{channel},#{partitionId},#{startPosition},#{endPosition},#{deviceIp},#{offsetValue},#{alarmValue},#{readOrder})
    </insert>
    <!--  修改光纤测温配置  -->
    <update id="editFibreTemperatureConfig" parameterType="FibreTemperatureConfig">
        update fibre_temperature_config set channel = #{channel},partition_id = #{partitionId},start_position=#{startPosition},end_position=#{endPosition},device_ip=#{deviceIp},offset_value=#{offsetValue},alarm_value=#{alarmValue},read_order=#{readOrder} where channel=#{channel} and partition_id = #{partitionId}
    </update>
    <!--  删除光纤测温配置  -->
    <delete id="delFibreTemperatureConfig">
        delete from fibre_temperature_config where channel = #{channel} and partition_id = #{partitionId}
    </delete>

    <!--  添加环境量和表皮测温配置  -->
    <!--  向device表添加配置（在上方addDevice）  -->
    <!--  向device_config表添加环境量和表皮测温配置(在上方addDeviceConfig）  -->
    <!--  向channel_attribute表添加配置数据  -->
    <insert id="addEnvironmentConfig" parameterType="environmentConfig">
        insert into channel_attribute(name, terminal_id, channel_id, channel_type, range_up, range_low, alarm_up, offset_value, is_use) values(#{channnelName},#{terminalId},#{channelId},#{channelType},#{rangeUp},#{rangeLow},#{alarmUp},#{offsetValue},#{use})
    </insert>

    <!--  更新环境量和表皮测温配置  -->
    <!--  更新device表配置(上方editDevice)  -->
    <!--  更新device_config表配置(上方editDeviceConfig)  -->
    <!--  更新channel_attribute表配置  -->
    <update id="editEnvironmentConfig" parameterType="environmentConfig">
        update channel_attribute set name = #{channnelName}, channel_type = #{channelType}, range_up = #{rangeUp}, range_low = #{rangeLow}, alarm_up = #{alarmUp}, offset_value = #{offsetValue}, is_use = #{use}
    </update>

    <!--  删除环境量和表皮测温配置  -->
    <!--  删除device表配置(上方delDevice)  -->
    <!--  删除device_config表配置(上方delDeviceConfig)  -->
    <!--  删除channel_attribute表配置  -->
    <delete id="delEnvironmentConfig">
        delete from channel_attribute where terminal_id = #{terminalId}
    </delete>

    <!--  条件查询光纤测温配置  -->
    <select id="queryGxcwByCondition" resultType="java.util.LinkedHashMap">
        select * from fibre_temperature_config
        <where>
            <if test="channel != null and channel !=''">
                AND channel = #{channel}
            </if>
            <if test="partitionId !=null and partitionId >= 0">
                AND partition_id = #{partitionId}
            </if>
        </where>
    </select>

    <!--  条件查询环境量和表皮测温配置  -->
    <select id="queryEnvironmentByCondition" parameterType="environmentConfig" resultType="java.util.LinkedHashMap">
        select ca.id,d.name,d.terminal_id,d.joint,dt.communication_mode,dc.device_ip,dc.port,dc.partition_id,dc.interval_slave,dc.retry_count,dc.retry_interval,dc.polling_interval,ca.name caname, ca.channel_id,ca.channel_type,ca.range_up,ca.range_low,ca.alarm_up,ca.offset_value,ca.is_use
        from device d,device_type dt,device_config dc, channel_attribute ca,line l
        <where>
            <if test="1==1">
                AND d.device_type_id = dt.device_type_id and d.terminal_id = dc.terminal_id and d.terminal_id = ca.terminal_id and d.line_id = l.line_id
            </if>
            <if test="deviceName != null and deviceName !=''">
                AND ca.name = #{deviceName}
            </if>
            <if test="channelId != null and channelId >=0">
                AND ca.channel_id = #{channelId}
            </if>
            <if test="deviceIp != null and deviceIp !=''">
                AND ca.device_ip = #{deviceIp}
            </if>
            <if test="partitionId != null and partitionId != ''">
                AND ca.partition_id = #{partitionId}
            </if>
        </where>
    </select>
</mapper>